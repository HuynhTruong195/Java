üí° 1. CSDL l√† g√¨?
C∆° s·ªü d·ªØ li·ªáu (Database) l√† n∆°i l∆∞u tr·ªØ d·ªØ li·ªáu c√≥ c·∫•u tr√∫c. Trong Java, th∆∞·ªùng d√πng c√°c h·ªá qu·∫£n tr·ªã CSDL (DBMS) nh∆∞:

    MySQL

    PostgreSQL

    SQLite

    Oracle Database

    SQL Server

üíª 2. Java l√†m vi·ªác v·ªõi CSDL nh∆∞ th·∫ø n√†o?
Java s·ª≠ d·ª•ng API JDBC (Java Database Connectivity) ƒë·ªÉ k·∫øt n·ªëi v√† l√†m vi·ªác v·ªõi c∆° s·ªü d·ªØ li·ªáu.

‚ú≥Ô∏è JDBC l√† g√¨?
JDBC l√† m·ªôt API chu·∫©n cho ph√©p Java t∆∞∆°ng t√°c v·ªõi c√°c CSDL quan h·ªá (RDBMS).

üîó 3. C√°c b∆∞·ªõc k·∫øt n·ªëi CSDL v·ªõi Java qua JDBC
    1. Load Driver
    2. K·∫øt n·ªëi ƒë·∫øn CSDL
    3. T·∫°o Statement
    4. Th·ª±c thi truy v·∫•n (Query)
    5. X·ª≠ l√Ω k·∫øt qu·∫£
    6. ƒê√≥ng k·∫øt n·ªëi

    V√≠ d·ª• k·∫øt n·ªëi MySQL:
        import java.sql.*;

public class DatabaseExample {
    public static void main(String[] args) {
        String url = "jdbc:mysql://localhost:3306/ten_csdl";
        String user = "root";
        String password = "mat_khau";

        try {
            // 1. N·∫°p Driver
            Class.forName("com.mysql.cj.jdbc.Driver");

            // 2. K·∫øt n·ªëi CSDL
            Connection conn = DriverManager.getConnection(url, user, password);

            // 3. T·∫°o Statement
            Statement stmt = conn.createStatement();

            // 4. Th·ª±c thi truy v·∫•n
            ResultSet rs = stmt.executeQuery("SELECT * FROM students");

            // 5. X·ª≠ l√Ω k·∫øt qu·∫£
            while (rs.next()) {
                System.out.println(rs.getString("name"));
            }

            // 6. ƒê√≥ng k·∫øt n·ªëi
            rs.close();
            stmt.close();
            conn.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}


üì¶ 4. C√°c lo·∫°i Statement
    Lo·∫°i	                            M√¥ t·∫£
    Statement	            D√πng cho truy v·∫•n ƒë∆°n gi·∫£n
    PreparedStatement	    Truy v·∫•n c√≥ tham s·ªë, ngƒÉn SQL Injection
    CallableStatement	    G·ªçi stored procedure trong CSDL

üìö 5. M·ªôt s·ªë th∆∞ vi·ªán h·ªó tr·ª£ ngo√†i JDBC
Hibernate: ORM Framework gi√∫p l√†m vi·ªác v·ªõi CSDL nh∆∞ thao t√°c v·ªõi ƒë·ªëi t∆∞·ª£ng Java.
JPA (Java Persistence API): Giao di·ªán chu·∫©n cho ORM.
Spring JDBC / Spring Data JPA: T√≠ch h·ª£p trong ·ª©ng d·ª•ng Spring, ƒë∆°n gi·∫£n h√≥a truy v·∫•n.

    ‚úÖ T√≥m l·∫°i
    Th√†nh ph·∫ßn	                Vai tr√≤
    JDBC	        API k·∫øt n·ªëi CSDL trong Java
    Driver	        K·∫øt n·ªëi v·ªõi CSDL c·ª• th·ªÉ
    SQL	            Ng√¥n ng·ªØ truy v·∫•n
    ORM	            T·ª± ƒë·ªông √°nh x·∫° ƒë·ªëi t∆∞·ª£ng Java ‚Üî CSDL


‚úÖC√°c th√†nh ph·∫ßn ch√≠nh c·ªßa m·ªôt h·ªá CSDL
    D·ªØ li·ªáu: ƒê∆∞·ª£c l∆∞u tr·ªØ theo c·∫•u tr√∫c nh·∫•t ƒë·ªãnh
    Ph·∫ßn m·ªÅm qu·∫£n tr·ªã: L√† DBMS nh∆∞ ƒë√£ n√™u tr√™n
    Ng√¥n ng·ªØ thao t√°c d·ªØ li·ªáu: Ng√¥n ng·ªØ th∆∞·ªùng d√πng nh·∫•t l√† SQL (Structured Query Language)
    Ng∆∞·ªùi d√πng: G·ªìm ng∆∞·ªùi d√πng cu·ªëi, l·∫≠p tr√¨nh vi√™n, qu·∫£n tr·ªã vi√™n h·ªá th·ªëng
 

‚úÖ∆Øu ƒëi·ªÉm c·ªßa vi·ªác s·ª≠ d·ª•ng CSDL
    Gi·∫£m tr√πng l·∫∑p d·ªØ li·ªáu
    TƒÉng t√≠nh nh·∫•t qu√°n v√† to√†n v·∫πn d·ªØ li·ªáu
    H·ªó tr·ª£ truy c·∫≠p ƒë·ªìng th·ªùi v√† hi·ªáu qu·∫£
    TƒÉng t√≠nh b·∫£o m·∫≠t
    D·ªÖ m·ªü r·ªông v√† b·∫£o tr√¨


üî∞ 1. Ph√¢n lo·∫°i theo m√¥ h√¨nh d·ªØ li·ªáu
a. C∆° s·ªü d·ªØ li·ªáu quan h·ªá (Relational Database - RDBMS)
    T·ªï ch·ª©c theo b·∫£ng (table): h√†ng (row) v√† c·ªôt (column)

    Ng√¥n ng·ªØ truy v·∫•n: SQL
    V√≠ d·ª•: MySQL, PostgreSQL, Oracle, SQL Server

‚û°Ô∏è D√πng nhi·ªÅu nh·∫•t trong Java (JDBC, Hibernate, JPA...)

b. C∆° s·ªü d·ªØ li·ªáu phi quan h·ªá (NoSQL)
Kh√¥ng d√πng b·∫£ng, m√† d√πng:
    Document (MongoDB)
    Key-Value (Redis)
    Column-Family (Cassandra)
    Graph (Neo4j)
    Kh√¥ng d√πng SQL truy·ªÅn th·ªëng

‚û°Ô∏è Th√≠ch h·ª£p cho Big Data, d·ªØ li·ªáu linh ho·∫°t, t·ªëc ƒë·ªô cao

c. C∆° s·ªü d·ªØ li·ªáu h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng (Object-Oriented DB)
    L∆∞u tr·ªØ ƒë·ªëi t∆∞·ª£ng nh∆∞ trong l·∫≠p tr√¨nh OOP
    H·ªó tr·ª£ k·∫ø th·ª´a, ƒë√≥ng g√≥i, ƒëa h√¨nh
    √çt ph·ªï bi·∫øn h∆°n, nh∆∞ng c√≥ th·ªÉ t√≠ch h·ª£p t·ªët v·ªõi Java

d. C∆° s·ªü d·ªØ li·ªáu ph√¢n t√°n (Distributed DB)
    D·ªØ li·ªáu l∆∞u tr·ªØ tr√™n nhi·ªÅu m√°y ch·ªß kh√°c nhau
    ƒê·∫£m b·∫£o hi·ªáu su·∫•t v√† t√≠nh s·∫µn s√†ng cao
    V√≠ d·ª•: Google Spanner, Apache Cassandra


M·ªôt s·ªë kh√°i ni·ªám c∆° b·∫£n
    B·∫£ng (Table): N∆°i ch·ª©a d·ªØ li·ªáu, g·ªìm c√°c h√†ng v√† c·ªôt
    B·∫£n ghi (Record/Row): M·ªôt h√†ng d·ªØ li·ªáu trong b·∫£ng
    Thu·ªôc t√≠nh (Field/Column): M·ªôt c·ªôt trong b·∫£ng, ch·ª©a gi√° tr·ªã c·ªßa m·ªôt lo·∫°i th√¥ng tin
    Kh√≥a ch√≠nh (Primary key): D√πng ƒë·ªÉ ph√¢n bi·ªát duy nh·∫•t m·ªói b·∫£n ghi trong b·∫£ng
    Kh√≥a ngo·∫°i (Foreign key): D√πng ƒë·ªÉ t·∫°o li√™n k·∫øt gi·ªØa c√°c b·∫£ng
 

M√¥ h√¨nh CSDL
    M√¥ h√¨nh quan h·ªá: D·ªØ li·ªáu ƒë∆∞·ª£c m√¥ t·∫£ d∆∞·ªõi d·∫°ng c√°c b·∫£ng
    M√¥ h√¨nh ph√¢n c·∫•p (Hierarchical), m√¥ h√¨nh m·∫°ng (Network): C≈©, √≠t ƒë∆∞·ª£c s·ª≠ d·ª•ng ng√†y nay
    M√¥ h√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng: K·∫øt h·ª£p gi·ªØa l·∫≠p tr√¨nh h∆∞·ªõng ƒë·ªëi t∆∞·ª£ng v√† CSDL.



 ‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è   
    ‚úÖ M√î H√åNH QUAN H·ªÜ TH·ª∞C TH·ªÇ (ER Model ‚Äì Entity Relationship Model)

M√¥ h√¨nh Quan h·ªá Th·ª±c th·ªÉ (g·ªçi t·∫Øt l√† ER) l√† m√¥ h√¨nh kh√°i ni·ªám d√πng ƒë·ªÉ m√¥ t·∫£ c·∫•u tr√∫c d·ªØ li·ªáu c·ªßa m·ªôt h·ªá th·ªëng ‚Äì ƒë·∫∑c bi·ªát l√† trong thi·∫øt k·∫ø c∆° s·ªü d·ªØ li·ªáu quan h·ªá.

üß† 1. Kh√°i ni·ªám c∆° b·∫£n
    Th·ª±c th·ªÉ (Entity)	
        L√† m·ªôt ƒë·ªëi t∆∞·ª£ng c·ª• th·ªÉ trong th·∫ø gi·ªõi th·ª±c m√† b·∫°n mu·ªën l∆∞u th√¥ng tin, nh∆∞: Sinh vi√™n, M√¥n h·ªçc, Gi·∫£ng vi√™n
      
    Thu·ªôc t√≠nh (Attribute)	
        L√† th√¥ng tin m√¥ t·∫£ cho th·ª±c th·ªÉ, v√≠ d·ª•: T√™n, M√£ sinh vi√™n, Tu·ªïi

    Kh√≥a ch√≠nh (Primary Key)
        L√† thu·ªôc t√≠nh duy nh·∫•t ƒë·ªãnh danh m·ªôt th·ª±c th·ªÉ

    M·ªëi quan h·ªá (Relationship)
        L√† m·ªëi li√™n k·∫øt gi·ªØa c√°c th·ª±c th·ªÉ, v√≠ d·ª•: Sinh vi√™n - ƒëƒÉng k√Ω - M√¥n h·ªçc

    B·ªôi s·ªë (Cardinality)
        Ch·ªâ r√µ s·ªë l∆∞·ª£ng th·ª±c th·ªÉ tham gia trong m·ªëi quan h·ªá: 1-1, 1-N, N-N  


üß± 2. V√≠ d·ª• ƒë∆°n gi·∫£n v·ªÅ m√¥ h√¨nh ER
B√†i to√°n: Qu·∫£n l√Ω sinh vi√™n ƒëƒÉng k√Ω m√¥n h·ªçc.

    ‚û§ C√°c th·ª±c th·ªÉ:
    SINH_VIEN (MaSV, HoTen, NgaySinh)

    MON_HOC (MaMH, TenMH, SoTinChi)

    ‚û§ M·ªëi quan h·ªá:
    DANG_KY(SINH_VIEN ‚Üî MON_HOC): m·ªôt sinh vi√™n c√≥ th·ªÉ ƒëƒÉng k√Ω nhi·ªÅu m√¥n h·ªçc v√† m·ªôt m√¥n h·ªçc c√≥ th·ªÉ c√≥ nhi·ªÅu sinh vi√™n ‚Üí N:N

üß© 3. Bi·ªÉu ƒë·ªì ER (ER Diagram)
    Bi·ªÉu ƒë·ªì ER th∆∞·ªùng c√≥:

    H√¨nh ch·ªØ nh·∫≠t ƒë·∫°i di·ªán cho Th·ª±c th·ªÉ

    H√¨nh oval cho Thu·ªôc t√≠nh

    H√¨nh h√¨nh thoi cho M·ªëi quan h·ªá

    C√°c ƒë∆∞·ªùng n·ªëi gi·ªØa c√°c h√¨nh th·ªÉ hi·ªán m·ªëi li√™n h·ªá

    [SINH_VIEN] ‚Äî‚Äî (ƒêƒÉng_K√Ω) ‚Äî‚Äî [MON_HOC]
        |                             |
    [MaSV, TenSV]         [MaMH, TenMH]





‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è
   ‚úÖ C√°c d·∫°ng thi·∫øt k·∫ø m√¥ h√¨nh ER model

üéØ 1. M√¥ h√¨nh ER m·ª©c kh√°i ni·ªám (Conceptual ER Model)
    L√† m·ª©c cao nh·∫•t c·ªßa m√¥ h√¨nh ER.
    T·∫≠p trung v√†o th·ª±c th·ªÉ, thu·ªôc t√≠nh, m·ªëi quan h·ªá gi·ªØa c√°c ƒë·ªëi t∆∞·ª£ng trong h·ªá th·ªëng m√† kh√¥ng quan t√¢m ƒë·∫øn c√°ch c√†i ƒë·∫∑t.

üìå V√≠ d·ª•:

    SinhVien c√≥ MaSV, Ten, Tuoi.

    SinhVien ‚Äî ƒêƒÉng k√Ω ‚Äî MonHoc.

‚úîÔ∏è D√πng ƒë·ªÉ trao ƒë·ªïi v·ªõi ng∆∞·ªùi d√πng ho·∫∑c ph√¢n t√≠ch y√™u c·∫ßu ban ƒë·∫ßu.


üß© 2. M√¥ h√¨nh ER m·ª©c logic (Logical ER Model)
    L√† b·∫£n n√¢ng c·∫•p t·ª´ m√¥ h√¨nh kh√°i ni·ªám, b·ªï sung:
    Ki·ªÉu d·ªØ li·ªáu thu·ªôc t√≠nh
    ƒê·ªãnh nghƒ©a c√°c kh√≥a ch√≠nh (primary keys), kh√≥a ngo·∫°i (foreign keys) v√† c√°c r√†ng bu·ªôc (constraints) kh√°c.
    Kh√¥ng ph·ª• thu·ªôc v√†o m·ªôt DBMS c·ª• th·ªÉ.

üìå V√≠ d·ª•:

    SinhVien (
    MaSV INT PRIMARY KEY,
    TenSV VARCHAR(100),
    Tuoi INT
    )

    MonHoc (
        MaMH INT PRIMARY KEY,
        TenMH VARCHAR(100)
    )

    DangKy (
        MaSV INT,
        MaMH INT,
        PRIMARY KEY (MaSV, MaMH),
        FOREIGN KEY (MaSV) REFERENCES SinhVien(MaSV),
        FOREIGN KEY (MaMH) REFERENCES MonHoc(MaMH)
    )

‚úîÔ∏è D√πng ƒë·ªÉ chuy·ªÉn sang CSDL quan h·ªá nh∆∞ MySQL, PostgreSQL..

‚öôÔ∏è 3. M√¥ h√¨nh ER m·ª©c v·∫≠t l√Ω (Physical ER Model)
    L√† m√¥ h√¨nh g·∫ßn nh·∫•t v·ªõi c√°ch c√†i ƒë·∫∑t th·ª±c t·∫ø trong h·ªá qu·∫£n tr·ªã CSDL (MySQL, SQL Server,...)
    C√≥ th√™m:
    Ch·ªâ m·ª•c (Index)
    Ki·ªÉu l∆∞u tr·ªØ
    T√™n b·∫£ng th·ª±c t·∫ø
    C·∫•u h√¨nh kh√≥a ngo·∫°i chi ti·∫øt

üìå V√≠ d·ª•:

    CREATE TABLE `sinhvien` (
    `masv` INT NOT NULL AUTO_INCREMENT,
    `hoten` VARCHAR(255),
    PRIMARY KEY (`masv`)
    ENGINE=InnoDB DEFAULT CHARSET=utf8mb4;
‚úîÔ∏è D√πng cho DBA v√† developer backend ƒë·ªÉ tri·ªÉn khai.

üß† 4. C√°c m√¥ h√¨nh m·ªü r·ªông c·ªßa ER (Enhanced ER ‚Äì EER)
D√πng ƒë·ªÉ bi·ªÉu di·ªÖn c√°c kh√°i ni·ªám ph·ª©c t·∫°p nh∆∞:

        M·ªü r·ªông                                     	M√¥ t·∫£
    T·ªïng qu√°t h√≥a (Generalization)	    Gom nhi·ªÅu th·ª±c th·ªÉ con th√†nh th·ª±c th·ªÉ cha
    Chuy√™n bi·ªát h√≥a (Specialization)	    T·ª´ m·ªôt th·ª±c th·ªÉ t·∫°o ra c√°c th·ª±c th·ªÉ con
    K·∫ø th·ª´a (Inheritance)	                Thu·ªôc t√≠nh ƒë∆∞·ª£c chia s·∫ª t·ª´ cha ‚Üí con
    T·∫≠p th·ª±c th·ªÉ y·∫øu (Weak Entity)	    Kh√¥ng c√≥ kh√≥a ch√≠nh ri√™ng, ph·ª• thu·ªôc v√†o th·ª±c th·ªÉ kh√°c

üìå V√≠ d·ª•:
    Th·ª±c th·ªÉ NhanVien c√≥ th·ªÉ chia th√†nh: NhanVienFullTime, NhanVienPartTime

                      üìù T√≥m t·∫Øt b·∫£ng so s√°nh
    M·ª©c ER Model	            M·ª•c ƒë√≠ch	              Chi ti·∫øt
    Kh√°i ni·ªám           	Ph√¢n t√≠ch y√™u c·∫ßu	    T√™n, th·ª±c th·ªÉ, quan h·ªá
    Logic               	Thi·∫øt k·∫ø CSDL	        Kh√≥a, ki·ªÉu d·ªØ li·ªáu
    V·∫≠t l√Ω	                    Tri·ªÉn khai      	T·ªëi ∆∞u h√≥a, engine
    M·ªü r·ªông (EER)	            N√¢ng cao	        Th·ª´a k·∫ø, ƒëa h√¨nh



üéØüéØüéØüéØüéØüéØüéØüéØüéØüéØüéØüéØüéØüéØüéØüéØüéØüéØüéØüéØüéØüéØ
üéØ C√°c b∆∞·ªõc thi·∫øt k·∫ø c∆° s·ªü d·ªØ li·ªáu
   
üß© B∆∞·ªõc 1: Ph√¢n t√≠ch y√™u c·∫ßu h·ªá th·ªëng
Hi·ªÉu r√µ b√†i to√°n ho·∫∑c h·ªá th·ªëng c·∫ßn x√¢y d·ª±ng.
    X√°c ƒë·ªãnh:
    Th√¥ng tin n√†o c·∫ßn l∆∞u?
    Ai s·ª≠ d·ª•ng?
    C√°c ch·ª©c nƒÉng ch√≠nh?

üìå V√≠ d·ª•: Qu·∫£n l√Ω sinh vi√™n ƒëƒÉng k√Ω m√¥n h·ªçc ‚Üí c·∫ßn l∆∞u Sinh vi√™n, M√¥n h·ªçc, v√† ƒêƒÉng k√Ω.

üß± B∆∞·ªõc 2: X√°c ƒë·ªãnh c√°c th·ª±c th·ªÉ v√† thu·ªôc t√≠nh
    M·ªói th·ª±c th·ªÉ (Entity) s·∫Ω tr·ªü th√†nh m·ªôt b·∫£ng trong c∆° s·ªü d·ªØ li·ªáu.
    M·ªói thu·ªôc t√≠nh s·∫Ω l√† m·ªôt c·ªôt c·ªßa b·∫£ng.

üìå V√≠ d·ª•:

Th·ª±c th·ªÉ	Thu·ªôc t√≠nh
SinhVien	MaSV, TenSV, Tuoi
MonHoc	MaMH, TenMH, SoTinChi

üîó B∆∞·ªõc 3: X√°c ƒë·ªãnh m·ªëi quan h·ªá gi·ªØa c√°c th·ª±c th·ªÉ
    M·ªëi quan h·ªá 1-1, 1-N, N-N
    N·∫øu l√† N-N ‚Üí c·∫ßn th√™m b·∫£ng trung gian

üìå V√≠ d·ª•:

M·ªôt SinhVien c√≥ th·ªÉ ƒëƒÉng k√Ω nhi·ªÅu MonHoc ‚Üí M·ªëi quan h·ªá N:N ‚Üí t·∫°o b·∫£ng DangKy(MaSV, MaMH)

üß† B∆∞·ªõc 4: Thi·∫øt k·∫ø m√¥ h√¨nh ER (ERD)
V·∫Ω s∆° ƒë·ªì th·ªÉ hi·ªán:
    Th·ª±c th·ªÉ (h√¨nh ch·ªØ nh·∫≠t)
    Thu·ªôc t√≠nh (h√¨nh oval)
    M·ªëi quan h·ªá (h√¨nh thoi)
    ƒê√°nh d·∫•u kh√≥a ch√≠nh v√† li√™n k·∫øt

üìå C√¥ng c·ª• h·ªó tr·ª£ v·∫Ω:

    dbdiagram.io

    draw.io

    Lucidchart

üõ†Ô∏è B∆∞·ªõc 5: Thi·∫øt k·∫ø m√¥ h√¨nh logic
Chuy·ªÉn th·ª±c th·ªÉ & m·ªëi quan h·ªá th√†nh b·∫£ng d·ªØ li·ªáu chu·∫©n:
    CREATE TABLE SinhVien (
        MaSV INT PRIMARY KEY,
        TenSV VARCHAR(100),
        Tuoi INT
    );

    CREATE TABLE MonHoc (
        MaMH INT PRIMARY KEY,
        TenMH VARCHAR(100),
        SoTinChi INT
    );

    CREATE TABLE DangKy (
        MaSV INT,
        MaMH INT,
        PRIMARY KEY (MaSV, MaMH),
        FOREIGN KEY (MaSV) REFERENCES SinhVien(MaSV),
        FOREIGN KEY (MaMH) REFERENCES MonHoc(MaMH)
    );

üîÑ B∆∞·ªõc 6: Chu·∫©n h√≥a (Normalization)
    ƒê·∫£m b·∫£o kh√¥ng tr√πng l·∫∑p, kh√¥ng d∆∞ th·ª´a:
    T√°ch d·ªØ li·ªáu l·∫∑p th√†nh b·∫£ng ri√™ng
    ƒê·∫£m b·∫£o c√°c chu·∫©n 1NF, 2NF, 3NF ƒë·ªÉ d·ªØ li·ªáu s·∫°ch, d·ªÖ qu·∫£n l√Ω

‚öôÔ∏è B∆∞·ªõc 7: Thi·∫øt k·∫ø v·∫≠t l√Ω
    X√°c ƒë·ªãnh ki·ªÉu d·ªØ li·ªáu c·ª• th·ªÉ (INT, VARCHAR, DATE, FLOAT, ...)
    ƒê·∫∑t ch·ªâ m·ª•c (index), ph√¢n v√πng (partition), engine ph√π h·ª£p

üîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîó
üîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîóüîó
    ‚úÖ M·ªêI QUAN H·ªÜ GI·ªÆA C√ÅC TH·ª∞C TH·ªÇ‚úÖ 

üîó 1. Quan h·ªá 1 ‚Äì 1 (One to One)
    M·ªôt b·∫£n ghi trong b·∫£ng A ch·ªâ li√™n k·∫øt v·ªõi duy nh·∫•t m·ªôt b·∫£n ghi trong b·∫£ng B, v√† ng∆∞·ª£c l·∫°i.

üìå V√≠ d·ª• th·ª±c t·∫ø:
    M·ªói ng∆∞·ªùi d√πng c√≥ m·ªôt h·ªì s∆° chi ti·∫øt (profile).
    B·∫£ng User v√† b·∫£ng Profile.

    User (UserID, Username)
    Profile (ProfileID, UserID, Address, Phone)
‚Üí UserID trong b·∫£ng Profile l√† kh√≥a ngo·∫°i v√† duy nh·∫•t (UNIQUE).

    ALTER TABLE Profile ADD CONSTRAINT FK_User
    FOREIGN KEY (UserID) REFERENCES User(UserID)
    ON DELETE CASCADE;

üîó 2. Quan h·ªá 1 ‚Äì N (One to Many)
    M·ªôt b·∫£n ghi trong b·∫£ng A c√≥ th·ªÉ li√™n k·∫øt v·ªõi nhi·ªÅu b·∫£n ghi trong b·∫£ng B, nh∆∞ng b·∫£n ghi trong b·∫£ng B ch·ªâ li√™n k·∫øt v·ªõi m·ªôt b·∫£n ghi duy nh·∫•t trong b·∫£ng A.

 üìå V√≠ d·ª• th·ª±c t·∫ø:
    M·ªôt l·ªõp h·ªçc c√≥ nhi·ªÅu sinh vi√™n.
    B·∫£ng Lop v√† b·∫£ng SinhVien.   

    Lop (MaLop, TenLop)
    SinhVien (MaSV, HoTen, MaLop)
‚Üí MaLop trong SinhVien l√† kh√≥a ngo·∫°i li√™n k·∫øt t·ªõi Lop.

    ALTER TABLE SinhVien ADD CONSTRAINT FK_Lop
    FOREIGN KEY (MaLop) REFERENCES Lop(MaLop);

üîó 3. Quan h·ªá N ‚Äì N (Many to Many).
    M·ªôt b·∫£n ghi trong b·∫£ng A c√≥ th·ªÉ li√™n k·∫øt v·ªõi nhi·ªÅu b·∫£n ghi trong b·∫£ng B v√† ng∆∞·ª£c l·∫°i.

üìå V√≠ d·ª• th·ª±c t·∫ø:
    M·ªôt sinh vi√™n c√≥ th·ªÉ ƒëƒÉng k√Ω nhi·ªÅu m√¥n h·ªçc, v√† m·ªôt m√¥n h·ªçc c√≥ th·ªÉ c√≥ nhi·ªÅu sinh vi√™n.
‚úÖ C√°ch x·ª≠ l√Ω:
    Ph·∫£i t·∫°o b·∫£ng trung gian ƒë·ªÉ bi·ªÉu di·ªÖn m·ªëi quan h·ªá.

    SinhVien (MaSV, HoTen)
    MonHoc (MaMH, TenMH)
    DangKy (MaSV, MaMH)
‚Üí B·∫£ng DangKy c√≥ 2 kh√≥a ngo·∫°i l√† MaSV, MaMH.

    CREATE TABLE DangKy (
        MaSV VARCHAR(10),
        MaMH VARCHAR(10),
        PRIMARY KEY (MaSV, MaMH),
        FOREIGN KEY (MaSV) REFERENCES SinhVien(MaSV),
        FOREIGN KEY (MaMH) REFERENCES MonHoc(MaMH)
    );


üõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏èüõ†Ô∏è
üõ†Ô∏è H·ªÜ QU·∫¢N TR·ªä C∆† S·ªû D·ªÆ LI·ªÜU MySQL

  üìö  SQL l√† ng√¥n ng·ªØ chu·∫©n d√πng ƒë·ªÉ qu·∫£n l√Ω v√† thao t√°c v·ªõi c∆° s·ªü d·ªØ li·ªáu quan h·ªá (RDBMS). N√≥ cho ph√©p ng∆∞·ªùi d√πng th·ª±c hi·ªán c√°c thao t√°c nh∆∞ truy v·∫•n, ch√®n, c·∫≠p nh·∫≠t, v√† x√≥a d·ªØ li·ªáu trong c∆° s·ªü d·ªØ li·ªáu. 
        C√≥ r·∫•t nhi·ªÅu CSDL kh√°c nhau nh∆∞ng ch√∫ng ƒë·ªÅu s·ª≠ d·ª•ng chung b·ªô ng√¥n ng·ªØ SQL
        D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u tr·ªØ trong c√°c b·∫£ng, v√† c√°c b·∫£ng c√≥ m·ªëi quan h·ªá v·ªõi nhau.

üí° 4. M·ªôt s·ªë l·ªánh SQL c∆° b·∫£n trong MySQL
M·ª•c ƒë√≠ch	            C√¢u l·ªánh
T·∫°o CSDL	        CREATE DATABASE TenCSDL;
Ch·ªçn CSDL	            USE TenCSDL;
T·∫°o b·∫£ng	            CREATE TABLE TenBang (...);
Th√™m d·ªØ li·ªáu	    INSERT INTO TenBang (...) VALUES (...);
Hi·ªÉn th·ªã d·ªØ li·ªáu	SELECT * FROM TenBang;
Xo√° b·∫£ng	        DROP TABLE TenBang;
Xo√° CSDL        	DROP DATABASE TenCSDL;

üß± 5. V√≠ d·ª• ƒë∆°n gi·∫£n v·ªõi MySQL
üéØ B√†i to√°n: Qu·∫£n l√Ω sinh vi√™n
    -- T·∫°o CSDL
    CREATE DATABASE QLSinhVien;
    USE QLSinhVien;

    -- T·∫°o b·∫£ng SinhVien
    CREATE TABLE SinhVien (
        MaSV VARCHAR(10) PRIMARY KEY,
        HoTen VARCHAR(100),
        Tuoi INT
    );

    -- Th√™m sinh vi√™n
    INSERT INTO SinhVien VALUES ('SV001', 'Nguy·ªÖn VƒÉn A', 20);

    -- Xem danh s√°ch sinh vi√™n
    SELECT * FROM SinhVien;



‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ‚úÖ

    C√ÅC CH·ª®C NƒÇNG CH√çNH C·ª¶A SQL


Kh√°i ni·ªám
    SQL (Structured Query Language) l√† m·ªôt ng√¥n ng·ªØ m√°y t√≠nh ƒë∆∞·ª£c thi·∫øt k·∫ø ƒë·ªÉ qu·∫£n l√Ω v√† thao t√°c c∆° s·ªü d·ªØ li·ªáu quan h·ªá. N√≥ cho ph√©p ng∆∞·ªùi d√πng t·∫°o, truy v·∫•n, c·∫≠p nh·∫≠t v√† qu·∫£n l√Ω d·ªØ li·ªáu trong h·ªá qu·∫£n tr·ªã c∆° s·ªü d·ªØ li·ªáu (DBMS) nh∆∞ MySQL, SQL Server, PostgreSQL, Orac

‚úÖ 1. DDL ‚Äì Data Definition Language (Ng√¥n ng·ªØ ƒë·ªãnh nghƒ©a d·ªØ li·ªáu)

D√πng ƒë·ªÉ t·∫°o, s·ª≠a ƒë·ªïi, ho·∫∑c x√≥a c·∫•u tr√∫c b·∫£ng v√† c∆° s·ªü d·ªØ li·ªáu.

    CREATE:     T·∫°o c∆° s·ªü d·ªØ li·ªáu, b·∫£ng, ch·ªâ m·ª•c, view...
    ALTER:      Thay ƒë·ªïi c·∫•u tr√∫c b·∫£ng (th√™m, s·ª≠a, x√≥a c·ªôt)
    DROP:       X√≥a b·∫£ng ho·∫∑c c∆° s·ªü d·ªØ li·ªáu
    TRUNCATE:	X√≥a to√†n b·ªô d·ªØ li·ªáu trong b·∫£ng (nhanh h∆°n DELETE)

üìå V√≠ d·ª•:  
    CREATE TABLE SinhVien (
        MaSV VARCHAR(10) PRIMARY KEY,
        HoTen VARCHAR(100),
        Tuoi INT
    );


‚úÖ 2. DML ‚Äì Data Manipulation Language (Ng√¥n ng·ªØ thao t√°c d·ªØ li·ªáu)

D√πng ƒë·ªÉ thao t√°c d·ªØ li·ªáu trong c√°c b·∫£ng: th√™m, s·ª≠a, x√≥a, truy xu·∫•t.

    SELECT:	Truy v·∫•n d·ªØ li·ªáu
    INSERT: Th√™m d·ªØ li·ªáu
    UPDATE: C·∫≠p nh·∫≠t d·ªØ li·ªáu
    DELETE: X√≥a d·ªØ li·ªáu

üìå V√≠ d·ª•:
    INSERT TO SinhVien (MaSV, HoTen, NamSinh)
    VALUES (1, 'Nguyen Van A', 2000);

üìå V√≠ d·ª• 2 :
    INSERT INTO SinhVien VALUES ('SV001', 'Nguy·ªÖn VƒÉn A', 20);
    UPDATE SinhVien SET Tuoi = 21 WHERE MaSV = 'SV001';
    DELETE FROM SinhVien WHERE MaSV = 'SV001';

‚úÖ3.DQL (Data Query Language)

Ch·ªß y·∫øu l√† l·ªánh SELECT d√πng ƒë·ªÉ truy v·∫•n d·ªØ li·ªáu:   

    SELECT * FROM SinhVien;


‚úÖ 4. DCL ‚Äì Data Control Language (Ng√¥n ng·ªØ ki·ªÉm so√°t d·ªØ li·ªáu)

D√πng ƒë·ªÉ ph√¢n quy·ªÅn truy c·∫≠p v√† b·∫£o m·∫≠t d·ªØ li·ªáu.

    GRANT:	C·∫•p quy·ªÅn
    REVOKE:	Thu h·ªìi quy·ªÅn

üìå V√≠ d·ª•:

    GRANT SELECT ON SinhVien TO user1;
    REVOKE SELECT ON SinhVien FROM user1;

‚úÖ 5. TCL ‚Äì Transaction Control Language (Ng√¥n ng·ªØ ƒëi·ªÅu khi·ªÉn giao d·ªãch)   

D√πng ƒë·ªÉ qu·∫£n l√Ω c√°c thao t√°c thay ƒë·ªïi d·ªØ li·ªáu nh∆∞ m·ªôt kh·ªëi l·ªánh.

    COMMIT: 	X√°c nh·∫≠n v√† l∆∞u c√°c thay ƒë·ªïi
    ROLLBACK:	H·ªßy b·ªè c√°c thay ƒë·ªïi ch∆∞a COMMIT
    SAVEPOINT:	ƒê√°nh d·∫•u v·ªã tr√≠ kh√¥i ph·ª•c t·∫°m trong giao d·ªãch
    SET TRANSACTION:	Thi·∫øt l·∫≠p thu·ªôc t√≠nh giao d·ªãch

üìå V√≠ d·ª•:

    BEGIN;
    UPDATE TAIKHOAN SET SoDu = SoDu - 500 WHERE MaKH = 'KH01';
    UPDATE TAIKHOAN SET SoDu = SoDu + 500 WHERE MaKH = 'KH02';
    COMMIT;

‚úÖ 5. Ngo√†i ra:
    SQL c√≤n h·ªó tr·ª£:

    T·∫°o ch·ªâ m·ª•c (INDEX): tƒÉng t·ªëc truy v·∫•n

    T·∫°o View: b·∫£ng ·∫£o t·ª´ truy v·∫•n

    Stored Procedure / Function: th·ªß t·ª•c l∆∞u s·∫µn ƒë·ªÉ t√°i s·ª≠ d·ª•ng


üìå T√≥m t·∫Øt c√°c nh√≥m l·ªánh SQL
    Nh√≥m	    M·ª•c ƒë√≠ch	         V√≠ d·ª• l·ªánh
    DDL	        T·∫°o c·∫•u tr√∫c	    CREATE, ALTER, DROP
    DML	        Thao t√°c d·ªØ li·ªáu	SELECT, INSERT, UPDATE, DELETE
    DCL	        Ph√¢n quy·ªÅn	        GRANT, REVOKE
    TCL         Giao d·ªãch	        COMMIT, ROLLBACK

‚úÖƒê·∫∑c ƒëi·ªÉm c·ªßa SQL
    Kh√¥ng ph√¢n bi·ªát ch·ªØ hoa ‚Äì ch·ªØ th∆∞·ªùng, nh∆∞ng th∆∞·ªùng vi·∫øt t·ª´ kh√≥a b·∫±ng ch·ªØ hoa
    L√† ng√¥n ng·ªØ khai b√°o, ng∆∞·ªùi d√πng ch·ªâ c·∫ßn n√≥i "mu·ªën g√¨" thay v√¨ "l√†m nh∆∞ th·∫ø n√†o"
    D·ªÖ h·ªçc, d·ªÖ s·ª≠ d·ª•ng ƒë·ªëi v·ªõi ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu l√†m vi·ªác v·ªõi c∆° s·ªü d·ªØ li·ªáu
    

‚úÖ·ª®ng d·ª•ng c·ªßa SQL
    Qu·∫£n l√Ω d·ªØ li·ªáu trong c√°c h·ªá th·ªëng ph·∫ßn m·ªÅm
    Truy v·∫•n b√°o c√°o d·ªØ li·ªáu
    Ph√¢n t√≠ch d·ªØ li·ªáu trong kinh doanh
    X√¢y d·ª±ng ·ª©ng d·ª•ng web c√≥ t√≠ch h·ª£p c∆° s·ªü d·ªØ li·ªáu

üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±
üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±üß±
üìò I. Thi·∫øt k·∫ø C∆° s·ªü d·ªØ li·ªáu (Database)
1. C∆° s·ªü d·ªØ li·ªáu (Database) l√† g√¨?
    L√† n∆°i ch·ª©a to√†n b·ªô d·ªØ li·ªáu c·ªßa h·ªá th·ªëng.
    G·ªìm nhi·ªÅu b·∫£ng (table) c√≥ m·ªëi quan h·ªá v·ªõi nhau.

üîé V√≠ d·ª•: CSDL QLSinhVien c√≥ th·ªÉ ch·ª©a c√°c b·∫£ng: SinhVien, Lop, MonHoc, Diem.

üìó II. Thi·∫øt k·∫ø b·∫£ng (Table)
1. B·∫£ng l√† g√¨?
    L√† n∆°i l∆∞u d·ªØ li·ªáu c·ª• th·ªÉ theo d√≤ng (h√†ng) v√† c·ªôt (thu·ªôc t√≠nh).
    M·ªói b·∫£ng bi·ªÉu di·ªÖn m·ªôt th·ª±c th·ªÉ (entity): V√≠ d·ª•: sinh vi√™n, l·ªõp, s·∫£n ph·∫©m...
T√äN B·∫¢NG: 
    ƒê·∫∑t r√µ r√†ng, ng·∫Øn g·ªçn, d·ªÖ hi·ªÉu
    Th∆∞·ªùng ƒë·∫∑t ·ªü d·∫°ng danh t·ª´ s·ªë √≠t: Students, Classes, Products

C·ªòT D·ªÆ LI·ªÜU (columns / fields)
    M·ªói c·ªôt c√≥ t√™n v√† ki·ªÉu d·ªØ li·ªáu r√µ r√†ng:
        VARCHAR: Chu·ªói k√Ω t·ª±
        INT: S·ªë nguy√™n
        DATE: Ng√†y th√°ng
        FLOAT: S·ªë th·ª±c

KH√ìA CH√çNH: (Primary Key): C·ªôt d√πng ƒë·ªÉ ph√¢n bi·ªát t·ª´ng d√≤ng d·ªØ li·ªáu.
    L√† thu·ªôc t√≠nh duy nh·∫•t ƒë·ªãnh danh m·ªói b·∫£n ghi
    Kh√¥ng ƒë∆∞·ª£c tr√πng l·∫∑p ho·∫∑c r·ªóng
    V√≠ d·ª•: student_id l√† kh√≥a ch√≠nh c·ªßa b·∫£ng Students

KH√ìA NGO·∫†I: 
    L√† tr∆∞·ªùng li√™n k·∫øt ƒë·∫øn kh√≥a ch√≠nh c·ªßa b·∫£ng kh√°c
    D√πng ƒë·ªÉ t·∫°o quan h·ªá gi·ªØa c√°c b·∫£ng
 



üß± III. T·∫°o CSDL v√† b·∫£ng trong SQL
‚úÖ T·∫°o c∆° s·ªü d·ªØ li·ªáu

    CREATE DATABASE QLSinhVien;
    USE QLSinhVien;

‚úÖ T·∫°o b·∫£ng SinhVien

    CREATE TABLE SinhVien (
        MaSV VARCHAR(10) PRIMARY KEY,
        HoTen VARCHAR(100),
        NgaySinh DATE,
        GioiTinh VARCHAR(10),
        Email VARCHAR(100)
    );
üõ† IV. Th√™m / S·ª≠a / Xo√° c·ªôt trong b·∫£ng
‚ûï Th√™m c·ªôt:

    ALTER TABLE SinhVien
    ADD DiaChi VARCHAR(255);

üìù S·ª≠a ki·ªÉu d·ªØ li·ªáu ho·∫∑c ƒë·ªïi t√™n c·ªôt:
-- ƒê·ªïi ki·ªÉu d·ªØ li·ªáu c·ªôt Email
    ALTER TABLE SinhVien
    MODIFY Email VARCHAR(150);

-- ƒê·ªïi t√™n c·ªôt (MySQL 8+)
    ALTER TABLE SinhVien
    RENAME COLUMN DiaChi TO DiaChiThuongTru;
‚ùå Xo√° c·ªôt:
    ALTER TABLE SinhVien
    DROP COLUMN DiaChiThuongTru;

üß™ V. Th√™m d·ªØ li·ªáu & truy v·∫•n
 -- Th√™m sinh vi√™n m·ªõi
    INSERT INTO SinhVien (MaSV, HoTen, NgaySinh, GioiTinh, Email)
    VALUES ('SV001', 'Nguy·ªÖn VƒÉn A', '2000-05-12', 'Nam', 'a@gmail.com');

-- Xem to√†n b·ªô d·ªØ li·ªáu
SELECT * FROM SinhVien;

üìå T√≥m t·∫Øt ki·∫øn th·ª©c c·∫ßn nh·ªõ
M·ª•c	                        L·ªánh SQL
T·∫°o CSDL	        CREATE DATABASE ...
S·ª≠ d·ª•ng CSDL	        USE ...
T·∫°o b·∫£ng	        CREATE TABLE ...
Th√™m c·ªôt	        ALTER TABLE ... ADD COLUMN ...
S·ª≠a c·ªôt         	ALTER TABLE ... MODIFY / RENAME COLUMN
Xo√° c·ªôt	            ALTER TABLE ... DROP COLUMN ...


üìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìò
C√ÅC C√ÇU L·ªÜNH C∆† B·∫¢N 

üìòINSERT 
L·ªánh INSERT ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ch√®n m·ªôt ho·∫∑c nhi·ªÅu b·∫£n ghi m·ªõi v√†o m·ªôt b·∫£ng. B·∫°n c√≥ th·ªÉ ch√®n d·ªØ li·ªáu cho t·∫•t c·∫£ c√°c c·ªôt ho·∫∑c ch·ªâ nh·ªØng c·ªôt ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh.

    INSERT INTO table_name (column1, column2, column3...)
    VALUES (value1, value2, value3...);

table_name: t√™n b·∫£ng c·∫ßn th√™m m·ªõi d·ªØ li·ªáu
column: t√™n c√°c c·ªôt 
value: c√°c gi√° tr·ªã t∆∞∆°ng ·ª©ng cho c√°c c·ªôt
Ch√∫ √Ω: c√≥ bao nhi√™u column ph·∫£i c√≥ b·∫•y nhi√™u value. N·∫øu s·ªë l∆∞·ª£ng value nh·∫≠p v√†o ƒë√∫ng b·∫±ng s·ªë c·ªôt c·ªßa b·∫£n ghi th√¨ c√≥ th·ªÉ b·ªè qua vi·ªác khai b√°o c√°c column

üìòUPDATE 
L·ªánh UPDATE ƒë∆∞·ª£c d√πng ƒë·ªÉ c·∫≠p nh·∫≠t d·ªØ li·ªáu hi·ªán c√≥ trong b·∫£ng. N√≥ thay ƒë·ªïi c√°c gi√° tr·ªã c·ªßa m·ªôt ho·∫∑c nhi·ªÅu c·ªôt d·ª±a tr√™n ƒëi·ªÅu ki·ªán x√°c ƒë·ªãnh.

    UPDATE table_name
    SET colum1 = value1, colum2 = value2...
    WHERE condition;

table_name: t√™n b·∫£ng c·∫ßn c·∫≠p nh·∫≠t d·ªØ li·ªáu
column: t√™n c√°c c·ªôt 
value: c√°c gi√° tr·ªã t∆∞∆°ng ·ª©ng cho c√°c c·ªôt c·∫ßn thay ƒë·ªïi d·ªØ li·ªáu trong b·∫£n ghi
Ch√∫ √Ω: M·ªánh ƒë·ªÅ WHERE s·∫Ω ch·ªâ ƒë·ªãnh b·∫£n ghi n√†o ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√¥ng qua condition, n·∫øu kh√¥ng c√≥ m·ªánh ƒë·ªÅ WHERE th√¨ m·∫∑c ƒë·ªãnh to√†n b·ªô b·∫£n ghi trong b·∫£ng s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t

üìòDELETE
L·ªánh DELETE ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ x√≥a m·ªôt ho·∫∑c nhi·ªÅu b·∫£n ghi t·ª´ b·∫£ng d·ª±a tr√™n ƒëi·ªÅu ki·ªán cho tr∆∞·ªõc. N·∫øu kh√¥ng c√≥ ƒëi·ªÅu ki·ªán n√†o ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh, to√†n b·ªô c√°c b·∫£n ghi trong b·∫£ng s·∫Ω b·ªã x√≥a

    DELETE FROM table_name WHERE condition;

table_name: t√™n b·∫£ng c·∫ßn xo√° d·ªØ li·ªáu
Ch√∫ √Ω: M·ªánh ƒë·ªÅ WHERE s·∫Ω ch·ªâ ƒë·ªãnh b·∫£n ghi n√†o ƒë∆∞·ª£c xo√° th√¥ng qua condition, n·∫øu kh√¥ng c√≥ m·ªánh ƒë·ªÅ WHERE th√¨ m·∫∑c ƒë·ªãnh to√†n b·ªô b·∫£n ghi trong b√°ng s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t



üìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìò
üìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìòüìò
 C·∫•u tr√∫c c√¢u l·ªánh truy v·∫•n SQL

 ‚úÖc√¢u l·ªánh c∆° b·∫£n:
 
    SELECT t√™n_c·ªôt1, t√™n_c·ªôt2...
    FROM t√™n_b·∫£ng
    
    vd: SELECT full_name, age
    FROM students;
 
 => Truy v·∫•n tr√™n s·∫Ω l·∫•y t√™n v√† tu·ªïi c·ªßa t·∫•t c·∫£ sinh vi√™n trong b·∫£ng students
 

 ‚úÖ C·∫§U TR√öC CHUNG C·ª¶A C√ÇU L·ªÜNH SELECT:
    SELECT [DISTINCT] t√™n_c·ªôt_ho·∫∑c_h√†m
    FROM t√™n_b·∫£ng
    [WHERE ƒëi·ªÅu_ki·ªán]
    [GROUP BY c·ªôt_nh√≥m]
    [HAVING ƒëi·ªÅu_ki·ªán_nh√≥m]
    [ORDER BY c·ªôt_s·∫Øp_x·∫øp [ASC|DESC]]
    [LIMIT s·ªë_l∆∞·ª£ng];

    SELECT:	    Ch·ªçn c·ªôt c·∫ßn hi·ªÉn th·ªã. C√≥ th·ªÉ d√πng * ƒë·ªÉ ch·ªçn t·∫•t c·∫£.
    DISTINCT:	Lo·∫°i b·ªè c√°c d√≤ng tr√πng l·∫∑p.
    FROM:	    Ch·ªâ ƒë·ªãnh b·∫£ng l·∫•y d·ªØ li·ªáu.
    WHERE:	    ƒêi·ªÅu ki·ªán l·ªçc b·∫£n ghi (v√≠ d·ª•: age > 18).
    GROUP BY:	Nh√≥m d·ªØ li·ªáu theo m·ªôt ho·∫∑c nhi·ªÅu c·ªôt.
    HAVING: 	ƒêi·ªÅu ki·ªán l·ªçc sau khi GROUP BY (√°p d·ª•ng cho nh√≥m).
    ORDER BY:	S·∫Øp x·∫øp k·∫øt qu·∫£ theo c·ªôt, m·∫∑c ƒë·ªãnh l√† ASC (tƒÉng d·∫ßn).
    LIMIT:	    Gi·ªõi h·∫°n s·ªë d√≤ng k·∫øt qu·∫£ tr·∫£ v·ªÅ.

 ‚úÖ V√ç D·ª§ C·ª§ TH·ªÇ:
    SELECT name, COUNT(*) AS so_lan_mua
    FROM orders
    WHERE status = 'completed'
    GROUP BY name
    HAVING so_lan_mua > 2
    ORDER BY so_lan_mua DESC --DESC l√† gi·∫£m d·∫ßn, m·∫∑c ƒë·ªãnh l√† tƒÉng d·∫ßn th√¨ k ghi g√¨ ho·∫∑c ghi ASC
    LIMIT 10;
COUNT(*) l√† h√†m bi·∫øn ƒë·∫øm t·ªïng v√† AS so_lan_mua l√† s·∫Ω t·∫°o ra 1 c·ªôt, hi·ªÉn th·ªã gi√° tr·ªã c·ªßa count

‚û°Ô∏è √ù nghƒ©a: L·∫•y t√™n kh√°ch h√†ng v√† s·ªë l·∫ßn mua h√†ng th√†nh c√¥ng, l·ªçc nh·ªØng ng∆∞·ªùi mua h∆°n 2 l·∫ßn, s·∫Øp x·∫øp gi·∫£m d·∫ßn theo s·ªë l·∫ßn mua, v√† ch·ªâ l·∫•y 10 ng∆∞·ªùi ƒë·∫ßu ti√™n.

‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è
‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è‚û°Ô∏è
üîπ 1. To√°n t·ª≠ trong SQL
üìå To√°n t·ª≠ so s√°nh:
    To√°n t·ª≠           √ù nghƒ©a
    =	                 B·∫±ng
    != ho·∫∑c <>	          Kh√°c
    >	                  L·ªõn h∆°n
    <	                  Nh·ªè h∆°n
    >=	                 L·ªõn h∆°n ho·∫∑c b·∫±ng
    <=	                Nh·ªè h∆°n ho·∫∑c b·∫±ng
    BETWEEN a AND b	Trong kho·∫£ng t·ª´ a ƒë·∫øn b (bao g·ªìm a v√† b)
    IN (a, b, c)	    N·∫±m trong t·∫≠p gi√° tr·ªã
    NOT IN (...)	    Kh√¥ng n·∫±m trong t·∫≠p
    LIKE	            So kh·ªõp m·∫´u (d√πng v·ªõi %, _)
    IS NULL, IS NOT NULL	Ki·ªÉm tra gi√° tr·ªã NULL


 üìåTo√°n t·ª≠ logic:
    To√°n t·ª≠	        √ù nghƒ©a
    AND	V√†   (t·∫•t c·∫£ ƒëi·ªÅu ki·ªán ƒë·ªÅu ƒë√∫ng)
    OR	Ho·∫∑c (ch·ªâ c·∫ßn 1 ƒëi·ªÅu ki·ªán ƒë√∫ng)
    NOT	        Ph·ªß ƒë·ªãnh ƒëi·ªÅu ki·ªán

üîπ 2. C√°c h√†m th√¥ng d·ª•ng trong SQL
üìå H√†m t·ªïng h·ª£p (Aggregate Functions):
H√†m	            √ù nghƒ©a
COUNT(*)	    ƒê·∫øm s·ªë d√≤ng
SUM(column)	    T·ªïng gi√° tr·ªã trong c·ªôt
AVG(column)	    Gi√° tr·ªã trung b√¨nh
MAX(column)	    Gi√° tr·ªã l·ªõn nh·∫•t
MIN(column)	    Gi√° tr·ªã nh·ªè nh·∫•t



üîπ 1. To√°n t·ª≠ trong SQL
üìå To√°n t·ª≠ so s√°nh:
To√°n t·ª≠	√ù nghƒ©a
=	B·∫±ng
!= ho·∫∑c <>	Kh√°c
>	L·ªõn h∆°n
<	Nh·ªè h∆°n
>=	L·ªõn h∆°n ho·∫∑c b·∫±ng
<=	Nh·ªè h∆°n ho·∫∑c b·∫±ng
BETWEEN a AND b	Trong kho·∫£ng t·ª´ a ƒë·∫øn b (bao g·ªìm a v√† b)
IN (a, b, c)	N·∫±m trong t·∫≠p gi√° tr·ªã
NOT IN (...)	Kh√¥ng n·∫±m trong t·∫≠p
LIKE	So kh·ªõp m·∫´u (d√πng v·ªõi %, _)
IS NULL, IS NOT NULL	Ki·ªÉm tra gi√° tr·ªã NULL

üìå To√°n t·ª≠ logic:
To√°n t·ª≠	√ù nghƒ©a
AND	V√† (t·∫•t c·∫£ ƒëi·ªÅu ki·ªán ƒë·ªÅu ƒë√∫ng)
OR	Ho·∫∑c (ch·ªâ c·∫ßn 1 ƒëi·ªÅu ki·ªán ƒë√∫ng)
NOT	Ph·ªß ƒë·ªãnh ƒëi·ªÅu ki·ªán

üîπ 2. C√°c h√†m th√¥ng d·ª•ng trong SQL
üìå H√†m t·ªïng h·ª£p (Aggregate Functions):
H√†m	√ù nghƒ©a
COUNT(*)	ƒê·∫øm s·ªë d√≤ng
SUM(column)	T·ªïng gi√° tr·ªã trong c·ªôt
AVG(column)	Gi√° tr·ªã trung b√¨nh
MAX(column)	Gi√° tr·ªã l·ªõn nh·∫•t
MIN(column)	Gi√° tr·ªã nh·ªè nh·∫•t

üìå H√†m x·ª≠ l√Ω chu·ªói:
H√†m	                √ù nghƒ©a
LOWER(text)	    Chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng
UPPER(text)	    Chuy·ªÉn v·ªÅ ch·ªØ in hoa
LENGTH(text)	    ƒê·ªô d√†i chu·ªói
CONCAT(a, b)	    N·ªëi chu·ªói
TRIM(text)  	X√≥a kho·∫£ng tr·∫Øng ƒë·∫ßu/cu·ªëi
SUBSTRING(text, start, length)	C·∫Øt chu·ªói

üìå H√†m x·ª≠ l√Ω ng√†y th√°ng:
H√†m	                √ù nghƒ©a
NOW()	    L·∫•y th·ªùi gian hi·ªán t·∫°i
CURDATE()	L·∫•y ng√†y hi·ªán t·∫°i
YEAR(date)	L·∫•y nƒÉm t·ª´ ng√†y
MONTH(date)	L·∫•y th√°ng t·ª´ ng√†y
DATEDIFF(a, b)	T√≠nh s·ªë ng√†y gi·ªØa 2 ng√†y

üìå H√†m ƒëi·ªÅu ki·ªán:
H√†m/To√°n                t·ª≠	√ù nghƒ©a
CASE WHEN ... THEN ... ELSE ... END	ƒêi·ªÅu ki·ªán trong SELECT
IF(condition, value_if_true, value_if_false)	(MySQL) gi·ªëng h√†m IF trong Excel

üî∏ V√≠ d·ª• t·ªïng h·ª£p:
    SELECT 
        name,
        price,
        CASE 
            WHEN price >= 1000000 THEN 'ƒê·∫Øt'
            ELSE 'R·∫ª'
        END AS loai_san_pham,
        UPPER(name) AS ten_in_hoa
    FROM products
    WHERE price > 500000 AND name LIKE '%iphone%';


üìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìå
üìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìåüìå
C√ÅC KI·ªÇU TRUY V·∫§N T·ª™ NHI·ªÄU B·∫¢NG
‚ùì M·ª•c ƒë√≠ch:
D√πng khi b·∫°n mu·ªën l·∫•y d·ªØ li·ªáu t·ª´ nhi·ªÅu b·∫£ng c√≥ li√™n h·ªá v·ªõi nhau, th∆∞·ªùng th√¥ng qua kh√≥a ngo·∫°i (foreign key).


üîπ 1. S·ª≠ d·ª•ng JOIN (K·∫øt n·ªëi b·∫£ng)
üìå V√≠ d·ª•: C√≥ 2 b·∫£ng:
-- B·∫£ng sinhvien
| id | ten         | lop_id |
|----|-------------|--------|
| 1  | An          | 101    |
| 2  | B√¨nh        | 102    |

-- B·∫£ng lop
|lop_id| ten_lop   |
|-----|------------|
| 101 | CNTT       |
| 102 | Kinh t·∫ø    |

‚úÖ Truy v·∫•n t√™n sinh vi√™n v√† t√™n l·ªõp:
SELECT sinhvien.ten, lop.ten_lop
FROM sinhvien
JOIN lop ON sinhvien.lop_id = lop.lop_id;
üëâ ƒëi·ªÅu ki·ªán l√† cho 2 kh√≥a ngo·∫°i = nhau


üü¢ 2. Subquery ‚Äì Truy v·∫•n l·ªìng
D√πng khi b·∫°n mu·ªën l·∫•y d·ªØ li·ªáu t·ª´ m·ªôt b·∫£ng d·ª±a v√†o k·∫øt qu·∫£ truy v·∫•n t·ª´ b·∫£ng kh√°c.
‚úÖ V√≠ d·ª•:
    SELECT ten
    FROM sinhvien
    WHERE lop_id IN (
        SELECT id
        FROM lop
        WHERE ten_lop = 'CNTT'
    );
üîç Gi·∫£i th√≠ch:
C√¢u truy v·∫•n b√™n trong () ch·∫°y tr∆∞·ªõc: n√≥ ch·ªçn ra id c·ªßa l·ªõp CNTT.
C√¢u truy v·∫•n ngo√†i s·∫Ω l·ªçc sinh vi√™n c√≥ lop_id n·∫±m trong k·∫øt qu·∫£ ƒë√≥.

üü¢ 3. UNION ‚Äì G·ªôp d·ªØ li·ªáu t·ª´ nhi·ªÅu b·∫£ng
D√πng khi b·∫°n c√≥ nhi·ªÅu b·∫£ng c√≥ c·∫•u tr√∫c gi·ªëng nhau v√† mu·ªën g·ªôp k·∫øt qu·∫£ l·∫°i.

 ‚úÖ V√≠ d·ª•:
    SELECT ten FROM sinhvien
    UNION
    SELECT ten FROM giangvien;
üîç Gi·∫£i th√≠ch:
    L·∫•y t√™n t·ª´ c·∫£ b·∫£ng sinhvien v√† b·∫£ng giangvien.
    UNION t·ª± ƒë·ªông b·ªè d·ªØ li·ªáu tr√πng nhau.
    D√πng UNION ALL n·∫øu b·∫°n mu·ªën gi·ªØ nguy√™n t·∫•t c·∫£, k·ªÉ c·∫£ tr√πng.

üü¢ 4. EXISTS ‚Äì Ki·ªÉm tra c√≥ t·ªìn t·∫°i hay kh√¥ng    
D√πng ƒë·ªÉ ki·ªÉm tra xem m·ªôt ƒëi·ªÅu ki·ªán c√≥ t·ªìn t·∫°i trong b·∫£ng kh√°c hay kh√¥ng.

‚úÖ V√≠ d·ª•:
        SELECT ten
        FROM sinhvien s
        WHERE EXISTS (
            SELECT 1
            FROM lop
            WHERE lop.id = s.lop_id AND ten_lop = 'CNTT'
        );
üîç Gi·∫£i th√≠ch:
Truy v·∫•n s·∫Ω tr·∫£ v·ªÅ sinh vi√™n n·∫øu t·ªìn t·∫°i l·ªõp c√≥ t√™n l√† "CNTT" m√† sinh vi√™n ƒë√≥ h·ªçc.

‚úÖ T√≥m t·∫Øt cho b·∫°n d·ªÖ nh·ªõ:
C√°ch d√πng	                D√†nh cho m·ª•c ƒë√≠ch g√¨?
JOIN	      L·∫•y d·ªØ li·ªáu k·∫øt h·ª£p t·ª´ nhi·ªÅu b·∫£ng (quan h·ªá kh√≥a ngo·∫°i)
Subquery	    L·ªçc d·ªØ li·ªáu d·ª±a v√†o truy v·∫•n con
UNION	        G·ªôp k·∫øt qu·∫£ t·ª´ nhi·ªÅu b·∫£ng gi·ªëng nhau
EXISTS/IN	    Ki·ªÉm tra ƒëi·ªÅu ki·ªán t·ªìn t·∫°i trong b·∫£ng kh√°c


üß© Gi·∫£ s·ª≠ b·∫°n c√≥ 2 b·∫£ng:
üî∏ sinhvien:
    id	ten	    lop_id
    1	An	    101
    2	B√¨nh	102
    3	C∆∞·ªùng	999

üî∏ lop:
    lop_id	ten_lop
    101 	CNTT
    102	    Kinh t·∫ø
    103	    X√¢y d·ª±ng

‚úÖ 1. INNER JOIN ‚Äî D√πng ph·ªï bi·∫øn nh·∫•t (~80%)
üìå Khi d√πng:
D√πng khi b·∫°n ch·ªâ c·∫ßn d·ªØ li·ªáu KH·ªöP t·ª´ c·∫£ hai b·∫£ng.

V√≠ d·ª•: l·∫•y sinh vi√™n k√®m l·ªõp h·ªçc (ch·ªâ l·∫•y sinh vi√™n c√≥ l·ªõp h·ª£p l·ªá).
    SELECT sv.ten, l.ten_lop
    FROM sinhvien sv
    INNER JOIN lop l ON sv.lop_id = l.lop_id;
üëâ K·∫øt qu·∫£: ch·ªâ hi·ªán sinh vi√™n n√†o c√≥ l·ªõp t·ªìn t·∫°i trong b·∫£ng lop.

    ten	    ten_lop
    An	    CNTT
    B√¨nh	Kinh t·∫ø


üü¢ V√¨ sao ph·ªï bi·∫øn?
Tr√°nh d·ªØ li·ªáu "r√°c" ho·∫∑c "kh√¥ng ƒë·∫ßy ƒë·ªß".

T·ªëi ∆∞u t·ªëc ƒë·ªô truy v·∫•n v√¨ b·ªè b·ªõt c√°c d√≤ng kh√¥ng kh·ªõp.


‚úÖ 2. LEFT JOIN ‚Äî D√πng kh√° th∆∞·ªùng xuy√™n (~15%)
üìå Khi d√πng:
Khi c·∫ßn gi·ªØ to√†n b·ªô d·ªØ li·ªáu b·∫£ng b√™n tr√°i, k·ªÉ c·∫£ khi kh√¥ng c√≥ d·ªØ li·ªáu b√™n ph·∫£i.

V√≠ d·ª•: l·∫•y t·∫•t c·∫£ sinh vi√™n, d√π ch∆∞a ƒë∆∞·ª£c ph√¢n l·ªõp.

üü° Th∆∞·ªùng d√πng trong:
B√°o c√°o ki·ªÉm tra d·ªØ li·ªáu thi·∫øu.
Th·ªëng k√™ s·ªë sinh vi√™n ch∆∞a c√≥ l·ªõp, ƒë∆°n h√†ng ch∆∞a c√≥ kh√°ch...
    SELECT sv.ten, l.ten_lop
    FROM sinhvien sv
    LEFT JOIN lop l ON sv.lop_id = l.lop_id;

üëâ K·∫øt qu·∫£: l·∫•y T·∫§T C·∫¢ sinh vi√™n, k·ªÉ c·∫£ sinh vi√™n kh√¥ng c√≥ l·ªõp kh·ªõp.
    ten	    ten_lop
    An	    CNTT
    B√¨nh	Kinh t·∫ø
    C∆∞·ªùng	NULL
üü° Sinh vi√™n C∆∞·ªùng v·∫´n xu·∫•t hi·ªán, v√¨ JOIN theo b·∫£ng tr√°i.



üü† 3. RIGHT JOIN ‚Äî Hi·∫øm d√πng (~<5%)
üìå Khi d√πng:
T∆∞∆°ng t·ª± LEFT JOIN, nh∆∞ng gi·ªØ b·∫£ng b√™n ph·∫£i.

D√πng khi b·∫£ng quan tr·ªçng n·∫±m b√™n ph·∫£i.

‚ö†Ô∏è Ghi nh·ªõ:
H·∫ßu h·∫øt dev ch·ªçn ƒë·ªïi v·ªã tr√≠ b·∫£ng v√† d√πng LEFT JOIN cho d·ªÖ hi·ªÉu.

üî¥ 4. FULL JOIN ‚Äî Hi·∫øm h∆°n n·ªØa (MySQL kh√¥ng h·ªó tr·ª£)
üìå Khi d√πng:
D√πng khi b·∫°n mu·ªën th·∫•y m·ªçi d·ªØ li·ªáu t·ª´ c·∫£ 2 b·∫£ng, k·ªÉ c·∫£ kh√¥ng kh·ªõp.

‚ö†Ô∏è L∆∞u √Ω:
Kh√¥ng d√πng ƒë∆∞·ª£c trong MySQL (tr·ª´ khi vi·∫øt l·∫°i b·∫±ng UNION).

D√πng trong c√°c h·ªá nh∆∞ PostgreSQL, SQL Server, Oracle.

üéØ T√≥m l·∫°i cho th·ª±c t·∫ø:
Lo·∫°i JOIN	T·∫ßn su·∫•t d√πng	D√πng khi
INNER	üü¢ R·∫•t nhi·ªÅu	D·ªØ li·ªáu kh·ªõp gi·ªØa 2 b·∫£ng
LEFT	üü° Kh√° nhi·ªÅu	C·∫ßn gi·ªØ h·∫øt d·ªØ li·ªáu b·∫£ng tr√°i
RIGHT	üî∏ √çt d√πng	Gi·ªëng LEFT nh∆∞ng ƒë·∫£o b·∫£ng
FULL	üî¥ Hi·∫øm d√πng	Hi·ªÉn th·ªã m·ªçi d·ªØ li·ªáu c·∫£ 2 b·∫£ng (MySQL kh√¥ng c√≥)

üéØ G·ª¢I √ù L·ªò TR√åNH
N·∫øu b·∫°n l√† ng∆∞·ªùi m·ªõi h·ªçc SQL, b·∫°n c√≥ th·ªÉ h·ªçc theo tr√¨nh t·ª±:

    SELECT, WHERE, ORDER BY, LIMIT

    JOIN, GROUP BY, HAVING

    C√°c h√†m t·ªïng h·ª£p: COUNT(), SUM(), AVG(), MAX(), MIN()

    CASE WHEN, IN, BETWEEN, LIKE

    LEFT JOIN, RIGHT JOIN, FULL JOIN (n√¢ng cao)

    T·∫°o b·∫£ng, th√™m d·ªØ li·ªáu: CREATE TABLE, INSERT INTO, v.v.



    üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ 
    üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ üö´ 
        T·ªêI ∆ØU H√ìA TRUY V·∫§N

T·ªëi ∆∞u h√≥a truy v·∫•n (Query Optimization) l√† qu√° tr√¨nh c·∫£i thi·ªán hi·ªáu su·∫•t th·ª±c thi c√¢u l·ªánh SQL ‚Äì gi√∫p truy v·∫•n ch·∫°y nhanh h∆°n, t·ªën √≠t t√†i nguy√™n h∆°n v√† x·ª≠ l√Ω t·ªët tr√™n d·ªØ li·ªáu l·ªõn.

T·∫°i sao c·∫ßn t·ªëi ∆∞u h√≥a
Truy v·∫•n ch·∫≠m = h·ªá th·ªëng ch·∫≠m
T·ªën CPU, RAM, bƒÉng th√¥ng ‚Üí ·∫£nh h∆∞·ªüng to√†n b·ªô ·ª©ng d·ª•ng
Khi d·ªØ li·ªáu tƒÉng l√™n (h√†ng trƒÉm ngh√¨n b·∫£n ghi), c√¢u l·ªánh ch∆∞a t·ªëi ∆∞u s·∫Ω ‚Äúngh·∫Ωn c·ªï chai‚Äù

‚úÖ 1. Ch·ªâ ch·ªçn c·ªôt c·∫ßn thi·∫øt
üö´ Sai:
    SELECT * FROM sinhvien;
‚úÖ ƒê√∫ng:
    SELECT ten, tuoi FROM sinhvien;

üìò Gi·∫£i th√≠ch:

D·∫•u * ch·ªçn t·∫•t c·∫£ c·ªôt, kh√¥ng n√™n d√πng khi kh√¥ng c·∫ßn.
G√¢y t·ªën b·ªô nh·ªõ v√† bƒÉng th√¥ng n·∫øu b·∫£ng l·ªõn.


‚úÖ 2. D√πng ch·ªâ m·ª•c (INDEX) cho c·ªôt th∆∞·ªùng l·ªçc ho·∫∑c JOIN
CREATE INDEX idx_lop_id ON sinhvien(lop_id);
    üìò Gi·∫£i th√≠ch:

INDEX gi√∫p tƒÉng t·ªëc c√°c truy v·∫•n c√≥ WHERE, JOIN, ORDER BY...
Kh√¥ng n√™n index t·∫•t c·∫£ c·ªôt ‚Üí s·∫Ω g√¢y ch·∫≠m khi ghi (INSERT, UPDATE).

‚úÖ 3. Tr√°nh t√≠nh to√°n trong WHERE ho·∫∑c JOIN
üö´ Sai:
    SELECT * FROM sinhvien WHERE YEAR(CURDATE()) - tuoi > 21;
‚úÖ ƒê√∫ng:
    SELECT * FROM sinhvien WHERE tuoi < (YEAR(CURDATE()) - 21);

 üìò Gi·∫£i th√≠ch:

SQL s·∫Ω t√≠nh to√°n t·ª´ng d√≤ng n·∫øu b·∫°n ƒë·∫∑t h√†m trong WHERE.
Chuy·ªÉn ph√©p t√≠nh ra ngo√†i gi√∫p d√πng ch·ªâ m·ª•c.

‚úÖ 4. D√πng EXISTS thay v√¨ IN v·ªõi subquery l·ªõn
üö´ Sai:
    SELECT * FROM sinhvien
    WHERE lop_id IN (SELECT lop_id FROM lop WHERE ten_lop LIKE 'CNTT%');
‚úÖ ƒê√∫ng:
    SELECT * FROM sinhvien sv
    WHERE EXISTS (
        SELECT 1 FROM lop l
        WHERE l.lop_id = sv.lop_id AND l.ten_lop LIKE 'CNTT%'
    );

üìò Gi·∫£i th√≠ch:
EXISTS nhanh h∆°n IN khi subquery tr·∫£ v·ªÅ nhi·ªÅu d√≤ng.

‚úÖ 5. Tr√°nh d√πng DISTINCT n·∫øu kh√¥ng c·∫ßn
üö´ Sai:
    SELECT DISTINCT ten FROM sinhvien;
üìò N·∫øu d·ªØ li·ªáu kh√¥ng tr√πng ‚Üí DISTINCT s·∫Ω l√†m ch·∫≠m truy v·∫•n v√¥ √≠ch.

‚úÖ 6. Gi·ªõi h·∫°n d·ªØ li·ªáu tr·∫£ v·ªÅ
    SELECT ten FROM sinhvien ORDER BY tuoi DESC LIMIT 10;

 üìò Gi·∫£i th√≠ch:

LIMIT gi√∫p gi·∫£m d·ªØ li·ªáu tr·∫£ v·ªÅ ‚Üí nhanh h∆°n, nh·∫π h∆°n.
D√πng nhi·ªÅu trong ph√¢n trang (LIMIT x OFFSET y).

‚úÖ 7. D√πng EXPLAIN ƒë·ªÉ ph√¢n t√≠ch truy v·∫•n
    EXPLAIN SELECT * FROM sinhvien WHERE lop_id = 101;

 üìò Gi·∫£i th√≠ch:

EXPLAIN gi√∫p b·∫°n xem truy v·∫•n c√≥ ƒëang d√πng INDEX, ƒë·ªçc bao nhi√™u d√≤ng...
R·∫•t h·ªØu √≠ch khi c·∫ßn ki·ªÉm tra hi·ªáu su·∫•t.

‚úÖ 8. Tr√°nh JOIN qu√° nhi·ªÅu b·∫£ng n·∫øu kh√¥ng c·∫ßn
üìò M·ªói b·∫£ng JOIN th√™m ‚Üí t·ªën th√™m x·ª≠ l√Ω.
H√£y ch·ªâ JOIN b·∫£ng th·∫≠t s·ª± c·∫ßn thi·∫øt.

‚úÖ 9. D√πng LIMIT k·∫øt h·ª£p v·ªõi ch·ªâ m·ª•c ƒë·ªÉ ph√¢n trang hi·ªáu qu·∫£
üö´ Sai (ph√¢n trang ch·∫≠m v·ªõi OFFSET l·ªõn):
    SELECT * FROM sinhvien ORDER BY id LIMIT 10000, 10;
‚úÖ ƒê√∫ng (d√πng ID ƒë·ªÉ ph√¢n trang):
    SELECT * FROM sinhvien WHERE id > 10000 ORDER BY id LIMIT 10;
üìò Gi·∫£i th√≠ch:

Khi offset l·ªõn (10.000 tr·ªü l√™n), truy v·∫•n s·∫Ω r·∫•t ch·∫≠m.
Gi·∫£i ph√°p l√† d√πng ƒëi·ªÅu ki·ªán WHERE id > ... ƒë·ªÉ ph√¢n trang.


üéØ T·ªïng k·∫øt m·∫πo t·ªëi ∆∞u quan tr·ªçng:
M·∫πo	                                T√°c d·ª•ng ch√≠nh
Tr√°nh SELECT *	                Gi·∫£m t·∫£i h·ªá th·ªëng
D√πng ch·ªâ m·ª•c (INDEX)	    TƒÉng t·ªëc WHERE, JOIN, ORDER BY
T√≠nh to√°n ngo√†i WHERE	    TƒÉng kh·∫£ nƒÉng d√πng ch·ªâ m·ª•c
D√πng EXISTS thay IN         	Nhanh h∆°n v·ªõi b·∫£ng con l·ªõn
D√πng LIMIT, tr√°nh OFFSET l·ªõn	Ph√¢n trang hi·ªáu qu·∫£
